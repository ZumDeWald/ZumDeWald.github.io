{"ast":null,"code":"import _classCallCheck from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/Map.js\";\nimport React, { Component } from 'react';\nimport scriptLoader from 'react-async-script-loader';\n\nvar Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map() {\n    _classCallCheck(this, Map);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Map).apply(this, arguments));\n  }\n\n  _createClass(Map, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var isScriptLoadSucceed = _ref.isScriptLoadSucceed;\n\n      if (isScriptLoadSucceed) {\n        (function () {\n          var populateInfoWindow = function populateInfoWindow(marker, infowindow) {\n            //make sure infoWindow not already open\n            if (infowindow.marker !== marker) {\n              infowindow.marker = marker;\n              infowindow.setContent(\"<div>\".concat(marker.title, \"</div>\"));\n              infowindow.open(map, marker); //make sure marker is cleared if infowindow is closed\n\n              infowindow.addListener('closeclick', function () {\n                infowindow.setContent(null);\n              });\n            }\n          };\n\n          var markers = [];\n          var map = new window.google.maps.Map(document.getElementById('map'), {\n            center: {\n              lat: 34.6446582,\n              lng: -97.930316\n            },\n            zoom: 13\n          });\n          var locations = [{\n            title: 'location1',\n            location: {\n              lat: 34.6446582,\n              lng: -97.930316\n            }\n          }, {\n            title: 'location2',\n            location: {\n              lat: 34.6505821,\n              lng: -97.9580572\n            }\n          }, {\n            title: 'location3',\n            location: {\n              lat: 34.6454464,\n              lng: -97.9676083\n            }\n          }, {\n            title: 'location4',\n            location: {\n              lat: 34.6466411,\n              lng: -97.9536852\n            }\n          }, {\n            title: 'location5',\n            location: {\n              lat: 34.6667351,\n              lng: -97.9548392\n            }\n          }];\n          var infoWindow = new window.google.maps.InfoWindow({\n            content: \"I am telling you the INFO\"\n          });\n          var bounds = new window.google.maps.LatLngBounds(); //Loop over locations and create markers\n\n          for (var i = 0; i < locations.length; i++) {\n            //get position from location array\n            var position = locations[i].location;\n            var title = locations[i].title; //create a marker per location and push to array\n\n            var marker = new window.google.maps.Marker({\n              map: map,\n              position: position,\n              title: title,\n              animation: window.google.maps.Animation.DROP,\n              id: i\n            }); //push into markers array\n\n            markers.push(marker); //create onClick event to open InfoWindow\n\n            marker.addListener('click', function () {\n              populateInfoWindow(this, infoWindow);\n            });\n          }\n        })();\n      } else {\n        alert('No Script Loaded');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        classID: \"mapContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Map;\n}(Component); //ScriptLoader used to Async load Google Maps API\n\n\nexport default scriptLoader([\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAcGzKXNeOcVTjtGJ3mezaCbmfq3MAA3_c&v=3\"])(Map);","map":{"version":3,"sources":["/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/Map.js"],"names":["React","Component","scriptLoader","Map","isScriptLoadSucceed","populateInfoWindow","marker","infowindow","setContent","title","open","map","addListener","markers","window","google","maps","document","getElementById","center","lat","lng","zoom","locations","location","infoWindow","InfoWindow","content","bounds","LatLngBounds","i","length","position","Marker","animation","Animation","DROP","id","push","alert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport scriptLoader from 'react-async-script-loader';\n\n\nclass Map extends Component {\n\n  componentWillReceiveProps ({ isScriptLoadSucceed }) {\n    if (isScriptLoadSucceed) {\n\n      const markers = [];\n\n      const map = new window.google.maps.Map(document.getElementById('map'), {\n        center: {lat: 34.6446582, lng: -97.930316},\n        zoom: 13\n      });\n\n      const locations = [\n        {title: 'location1', location:{lat: 34.6446582, lng: -97.930316}},\n        {title: 'location2', location:{lat: 34.6505821, lng: -97.9580572}},\n        {title: 'location3', location:{lat: 34.6454464, lng: -97.9676083}},\n        {title: 'location4', location:{lat: 34.6466411, lng: -97.9536852}},\n        {title: 'location5', location:{lat: 34.6667351, lng: -97.9548392}},\n      ]\n\n      let infoWindow = new window.google.maps.InfoWindow({\n        content: `I am telling you the INFO`\n      });\n\n      let bounds = new window.google.maps.LatLngBounds();\n\n      //Loop over locations and create markers\n      for (let i=0; i<locations.length; i++) {\n        //get position from location array\n        let position = locations[i].location;\n        let title = locations[i].title;\n\n        //create a marker per location and push to array\n        let marker = new window.google.maps.Marker({\n          map: map,\n          position: position,\n          title: title,\n          animation: window.google.maps.Animation.DROP,\n          id: i\n        });\n\n        //push into markers array\n        markers.push(marker);\n\n        //create onClick event to open InfoWindow\n        marker.addListener('click', function() {\n          populateInfoWindow(this, infoWindow);\n        });\n      }\n\n      function populateInfoWindow(marker, infowindow) {\n        //make sure infoWindow not already open\n        if (infowindow.marker !== marker) {\n          infowindow.marker = marker;\n          infowindow.setContent(`<div>${marker.title}</div>`);\n          infowindow.open(map, marker);\n\n          //make sure marker is cleared if infowindow is closed\n          infowindow.addListener('closeclick', function() {\n            infowindow.setContent(null);\n          });\n        }\n      }\n\n    } else {\n      alert('No Script Loaded')\n    }\n  }\n\n  render() {\n\n    return (\n      <div classID=\"mapContainer\">\n        <div id='map'></div>\n      </div>\n    );\n\n  }\n\n}\n\n  //ScriptLoader used to Async load Google Maps API\nexport default scriptLoader(\n  [`https://maps.googleapis.com/maps/api/js?key=AIzaSyAcGzKXNeOcVTjtGJ3mezaCbmfq3MAA3_c&v=3`]\n) (Map)\n"]},"metadata":{},"sourceType":"module"}