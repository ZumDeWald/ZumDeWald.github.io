{"ast":null,"code":"import _classCallCheck from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FilterList from './FilterList';\nimport Map from './Map';\nimport InfoWindow from './InfoWindow';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      locations: [{\n        title: 'Bethlehem',\n        location: {\n          lat: 31.7053996,\n          lng: 35.1936877\n        }\n      }, {\n        title: 'Nazareth',\n        location: {\n          lat: 32.6996454,\n          lng: 35.2908666\n        }\n      }, {\n        title: 'Capernaum',\n        location: {\n          lat: 32.8803473,\n          lng: 35.5645522\n        }\n      }, {\n        title: 'Gesthsemane',\n        location: {\n          lat: 31.7793143,\n          lng: 35.2375914\n        }\n      }, {\n        title: 'Church of the Holy Sepulchre',\n        location: {\n          lat: 31.777207,\n          lng: 35.231681\n        }\n      }]\n    };\n    _this.markers = [];\n\n    _this.filterLocations = function (point) {\n      _this.setState(function (state) {\n        return {\n          locations: state.locations.filter(function (location) {\n            return location.title === point;\n          })\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"createInfoWindow\",\n    value: function createInfoWindow(e, map) {\n      //save title and ID to pass to InfoWindow component\n      var currentTitle = e.title;\n      var currentID = e.id; //create InfoWindow instance\n\n      var infoWindow = new window.google.maps.InfoWindow({\n        content: \"<div id='\".concat(currentID, \"' />\"),\n        position: e.position\n      }); //add listener to poulate infoWindow on click\n\n      infoWindow.addListener('domready', function (e) {\n        ReactDOM.render(React.createElement(InfoWindow, {\n          title: currentTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }), document.getElementById(\"\".concat(currentID)));\n      }); //open infoWindow on map\n\n      infoWindow.open(map);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var locations = this.state.locations;\n      return React.createElement(\"div\", {\n        id: \"map-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(FilterList, {\n        locations: this.state.locations,\n        onFilterLocations: this.filterLocations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(Map, {\n        id: \"main-map\",\n        options: {\n          center: {\n            lat: 31.7053996,\n            lng: 35.1936877\n          },\n          zoom: 13\n        } //On creating a map instance, add markers/infoWindows\n        //This setup allows for multiple Maps to be loaded\n        //independently inside the same main App if desired\n        ,\n        onMapLoad: function onMapLoad(map) {\n          //Create bounds instance\n          var bounds = new window.google.maps.LatLngBounds(); //Loop over state and create marker info for each\n          //location and push into new array\n          //Then add listener for each individual marker\n\n          locations.forEach(function (place, index) {\n            var position = place.location;\n            var title = place.title;\n            var marker = new window.google.maps.Marker({\n              map: map,\n              position: position,\n              title: title,\n              animation: window.google.maps.Animation.DROP,\n              id: index\n            }); //Add marker to new array\n\n            _this2.markers.push(marker); //Extend boundry of map to incorporate each marker\n\n\n            bounds.extend(marker.position);\n            marker.addListener('click', function () {\n              _this2.createInfoWindow(marker, map);\n            });\n          }); //Fit map to extended bounds\n\n          map.fitBounds(bounds);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/App.js"],"names":["React","Component","ReactDOM","FilterList","Map","InfoWindow","App","state","locations","title","location","lat","lng","markers","filterLocations","point","setState","filter","e","map","currentTitle","currentID","id","infoWindow","window","google","maps","content","position","addListener","render","document","getElementById","open","center","zoom","bounds","LatLngBounds","forEach","place","index","marker","Marker","animation","Animation","DROP","push","extend","createInfoWindow","fitBounds"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FilterList from './FilterList';\nimport Map from './Map';\nimport InfoWindow from './InfoWindow';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    locations: [\n      {title: 'Bethlehem', location:{lat: 31.7053996, lng: 35.1936877}},\n      {title: 'Nazareth', location:{lat: 32.6996454, lng: 35.2908666}},\n      {title: 'Capernaum', location:{lat: 32.8803473, lng: 35.5645522}},\n      {title: 'Gesthsemane', location:{lat: 31.7793143, lng: 35.2375914}},\n      {title: 'Church of the Holy Sepulchre', location:{lat: 31.777207, lng: 35.231681}},\n    ],\n  }\n\n  markers = [];\n\n  filterLocations = (point) => {\n    this.setState( state => ({\n      locations: state.locations.filter(location => location.title === point)\n    }))\n  }\n\n  createInfoWindow(e, map) {\n    //save title and ID to pass to InfoWindow component\n    let currentTitle = e.title;\n    let currentID = e.id;\n\n    //create InfoWindow instance\n    const infoWindow = new window.google.maps.InfoWindow({\n      content: `<div id='${currentID}' />`,\n      position: e.position\n    })\n\n    //add listener to poulate infoWindow on click\n    infoWindow.addListener('domready', e => {\n      ReactDOM.render(<InfoWindow\n        title={currentTitle}\n      />, document.getElementById(`${currentID}`))\n    })\n\n    //open infoWindow on map\n    infoWindow.open(map)\n  }\n\n\n  render() {\n\n    let locations = this.state.locations;\n\n\n    return (\n      <div id=\"map-container\">\n        <FilterList\n          locations={this.state.locations}\n          onFilterLocations={this.filterLocations}\n         />\n        <Map\n          id='main-map'\n          options={{\n            center: { lat:31.7053996 ,lng:35.1936877 },\n            zoom: 13\n          }}\n\n        //On creating a map instance, add markers/infoWindows\n        //This setup allows for multiple Maps to be loaded\n        //independently inside the same main App if desired\n          onMapLoad={ map => {\n            //Create bounds instance\n            const bounds = new window.google.maps.LatLngBounds();\n\n            //Loop over state and create marker info for each\n            //location and push into new array\n            //Then add listener for each individual marker\n            locations.forEach((place, index) => {\n              let position = place.location;\n              let title = place.title;\n              let marker = new window.google.maps.Marker({\n                map: map,\n                position: position,\n                title: title,\n                animation: window.google.maps.Animation.DROP,\n                id: index\n              });\n              //Add marker to new array\n              this.markers.push(marker);\n              //Extend boundry of map to incorporate each marker\n              bounds.extend(marker.position);\n              marker.addListener('click', () => {\n                this.createInfoWindow(marker, map);\n              });\n            });\n            //Fit map to extended bounds\n            map.fitBounds(bounds);\n          }}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}