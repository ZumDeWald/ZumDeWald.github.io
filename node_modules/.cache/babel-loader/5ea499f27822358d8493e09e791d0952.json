{"ast":null,"code":"import _classCallCheck from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/Map.js\";\nimport React, { Component } from 'react';\nimport scriptLoader from 'react-async-script-loader';\n\nvar Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map() {\n    _classCallCheck(this, Map);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Map).apply(this, arguments));\n  }\n\n  _createClass(Map, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var isScriptLoadSucceed = _ref.isScriptLoadSucceed;\n\n      if (isScriptLoadSucceed) {\n        (function () {\n          var populateInfoWindow = function populateInfoWindow(marker, infowindow) {\n            //make sure infoWindow not already open\n            if (infowindow.marker !== marker) {\n              //check for panorama, set to nearest if none available\n              var getStreetView = function getStreetView(data, status) {\n                if (status === window.google.maps.StreetViewStatus.OK) {\n                  var nearStreetViewLoc = data.location.latLng;\n                  var heading = window.google.maps.geometry.spherical.computeHeading(nearStreetViewLoc, marker.position);\n                  infoWindow.setContent(\"<div>\".concat(marker.title, \"</div><div id=\\\"pano\\\"></div>\"));\n                  var panoramaOptions = {\n                    position: nearStreetViewLoc,\n                    pov: {\n                      heading: heading,\n                      pitch: 30\n                    }\n                  };\n                  var panorama = new window.google.maps.StreetViewPanorama(document.getElementById(\"pano\"), panoramaOptions);\n                } else {\n                  infoWindow.setContent(\"<div>\".concat(marker.title, \"</div><div>No Street View Available</div>\"));\n                }\n              }; //Use Streetview Service to get closest Streetview available\n\n\n              infowindow.marker = marker;\n              infowindow.setContent(\"\"); //make sure marker is cleared if infowindow is closed\n\n              infowindow.addListener('closeclick', function () {\n                infowindow.marker = null;\n                marker.setAnimation(null);\n              }); //Set street views\n\n              var streetView = new window.google.maps.StreetViewService();\n              var radius = 50;\n              streetView.getPanoramaByLocation(marker.position, radius, getStreetView); //Open infoWindow\n\n              infoWindow.open(map, marker);\n            }\n          };\n\n          var markers = [];\n          var map = new window.google.maps.Map(document.getElementById('map'), {\n            center: {\n              lat: 34.6466411,\n              lng: -97.9536852\n            },\n            zoom: 13\n          });\n          var locations = [{\n            title: 'Bethlehem',\n            location: {\n              lat: 31.7053996,\n              lng: 35.1936877\n            }\n          }, {\n            title: 'Nazareth',\n            location: {\n              lat: 32.6996454,\n              lng: 35.2908666\n            }\n          }, {\n            title: 'Capernaum',\n            location: {\n              lat: 32.8803473,\n              lng: 35.5645522\n            }\n          }, {\n            title: 'Gesthsemane',\n            location: {\n              lat: 31.7793143,\n              lng: 35.2375914\n            }\n          }, {\n            title: 'Church of the Holy Sepulchre',\n            location: {\n              lat: 31.7784858,\n              lng: 35.2274115\n            }\n          }];\n          var infoWindow = new window.google.maps.InfoWindow({\n            content: null\n          });\n          var bounds = new window.google.maps.LatLngBounds(); //Loop over locations and create markers\n\n          var _loop = function _loop(i) {\n            //get position from location array\n            var position = locations[i].location;\n            var title = locations[i].title; //create a marker per location and push to array\n\n            var marker = new window.google.maps.Marker({\n              map: map,\n              position: position,\n              title: title,\n              animation: window.google.maps.Animation.DROP,\n              id: i\n            }); //push into markers array\n\n            markers.push(marker); //extend bounds of map for each marker so they all appear on load\n\n            bounds.extend(marker.position); //create onClick event to open InfoWindow\n\n            marker.addListener('click', function () {\n              marker.setAnimation(window.google.maps.Animation.BOUNCE);\n              populateInfoWindow(this, infoWindow);\n            });\n          };\n\n          for (var i = 0; i < locations.length; i++) {\n            _loop(i);\n          } //fit map to bounds of all markers\n\n\n          map.fitBounds(bounds);\n        })();\n      } else {\n        //alert if the script does not load\n        alert('No Script Loaded');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        classID: \"mapContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Map;\n}(Component); //ScriptLoader used to Async load Google Maps API\n\n\nexport default scriptLoader([\"https://maps.googleapis.com/maps/api/js?libraries=geometry&key=AIzaSyAcGzKXNeOcVTjtGJ3mezaCbmfq3MAA3_c&v=3\"])(Map);","map":{"version":3,"sources":["/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/Map.js"],"names":["React","Component","scriptLoader","Map","isScriptLoadSucceed","populateInfoWindow","marker","infowindow","getStreetView","data","status","window","google","maps","StreetViewStatus","OK","nearStreetViewLoc","location","latLng","heading","geometry","spherical","computeHeading","position","infoWindow","setContent","title","panoramaOptions","pov","pitch","panorama","StreetViewPanorama","document","getElementById","addListener","setAnimation","streetView","StreetViewService","radius","getPanoramaByLocation","open","map","markers","center","lat","lng","zoom","locations","InfoWindow","content","bounds","LatLngBounds","i","Marker","animation","Animation","DROP","id","push","extend","BOUNCE","length","fitBounds","alert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport scriptLoader from 'react-async-script-loader';\n\n\nclass Map extends Component {\n\n  componentWillReceiveProps ({ isScriptLoadSucceed }) {\n    if (isScriptLoadSucceed) {\n\n      const markers = [];\n\n      const map = new window.google.maps.Map(document.getElementById('map'), {\n        center: {lat: 34.6466411, lng: -97.9536852},\n        zoom: 13\n      });\n\n      const locations = [\n        {title: 'Bethlehem', location:{lat: 31.7053996, lng: 35.1936877}},\n        {title: 'Nazareth', location:{lat: 32.6996454, lng: 35.2908666}},\n        {title: 'Capernaum', location:{lat: 32.8803473, lng: 35.5645522}},\n        {title: 'Gesthsemane', location:{lat: 31.7793143, lng: 35.2375914}},\n        {title: 'Church of the Holy Sepulchre', location:{lat: 31.7784858, lng: 35.2274115}},\n      ]\n\n      let infoWindow = new window.google.maps.InfoWindow({\n        content: null\n      });\n\n      let bounds = new window.google.maps.LatLngBounds();\n\n      //Loop over locations and create markers\n      for (let i=0; i<locations.length; i++) {\n        //get position from location array\n        let position = locations[i].location;\n        let title = locations[i].title;\n\n        //create a marker per location and push to array\n        let marker = new window.google.maps.Marker({\n          map: map,\n          position: position,\n          title: title,\n          animation: window.google.maps.Animation.DROP,\n          id: i\n        });\n\n        //push into markers array\n        markers.push(marker);\n\n        //extend bounds of map for each marker so they all appear on load\n        bounds.extend(marker.position);\n\n        //create onClick event to open InfoWindow\n        marker.addListener('click', function() {\n          marker.setAnimation(window.google.maps.Animation.BOUNCE);\n          populateInfoWindow(this, infoWindow);\n        });\n      }\n\n      //fit map to bounds of all markers\n      map.fitBounds(bounds);\n\n      function populateInfoWindow(marker, infowindow) {\n        //make sure infoWindow not already open\n        if (infowindow.marker !== marker) {\n          infowindow.marker = marker;\n          infowindow.setContent(``);\n\n          //make sure marker is cleared if infowindow is closed\n          infowindow.addListener('closeclick', function() {\n            infowindow.marker = null;\n            marker.setAnimation(null);\n          });\n\n          //Set street views\n          let streetView = new window.google.maps.StreetViewService();\n          let radius = 50;\n\n          //check for panorama, set to nearest if none available\n          function getStreetView(data, status) {\n            if (status === window.google.maps.StreetViewStatus.OK) {\n              let nearStreetViewLoc = data.location.latLng;\n              let heading = window.google.maps.geometry.spherical.computeHeading(\n                nearStreetViewLoc, marker.position);\n                infoWindow.setContent(`<div>${marker.title}</div><div id=\"pano\"></div>`);\n                let panoramaOptions = {\n                  position: nearStreetViewLoc,\n                  pov: {\n                    heading: heading,\n                    pitch: 30\n                  }\n                };\n                let panorama = new window.google.maps.StreetViewPanorama(\n                  document.getElementById(\"pano\"), panoramaOptions);\n            } else {\n              infoWindow.setContent(`<div>${marker.title}</div><div>No Street View Available</div>`);\n            }\n          }\n          //Use Streetview Service to get closest Streetview available\n          streetView.getPanoramaByLocation(marker.position, radius, getStreetView);\n          //Open infoWindow\n          infoWindow.open(map, marker);\n        }\n      }\n\n    } else {\n      //alert if the script does not load\n      alert('No Script Loaded')\n    }\n  }\n\n  render() {\n\n    return (\n      <div classID=\"mapContainer\">\n        <div id='map'></div>\n      </div>\n    );\n\n  }\n\n}\n\n  //ScriptLoader used to Async load Google Maps API\nexport default scriptLoader(\n  [`https://maps.googleapis.com/maps/api/js?libraries=geometry&key=AIzaSyAcGzKXNeOcVTjtGJ3mezaCbmfq3MAA3_c&v=3`]\n) (Map)\n"]},"metadata":{},"sourceType":"module"}