{"ast":null,"code":"import _classCallCheck from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/Map.js\";\nimport React, { Component } from 'react';\nimport scriptLoader from 'react-async-script-loader';\n\nvar Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map() {\n    _classCallCheck(this, Map);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Map).apply(this, arguments));\n  }\n\n  _createClass(Map, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var isScriptLoadSucceed = _ref.isScriptLoadSucceed;\n\n      if (isScriptLoadSucceed) {\n        (function () {\n          var populateInfoWindow = function populateInfoWindow(marker, infowindow) {\n            //make sure infoWindow not already open\n            if (infowindow.marker !== marker) {\n              //check for panorama, set to nearest if none available\n              var getStreetView = function getStreetView(data, status) {\n                if (status === window.google.maps.StreetViewStatus.OK) {\n                  var nearStreetViewLoc = data.location.latLng;\n                  var heading = window.google.maps.geometry.spherical.computeHeading();\n                }\n              };\n\n              infowindow.marker = marker;\n              infowindow.setContent(\"<div>\".concat(marker.title, \"</div>\"));\n              infowindow.open(map, marker); //make sure marker is cleared if infowindow is closed\n\n              infowindow.addListener('closeclick', function () {\n                infowindow.setContent(null);\n                marker.setAnimation(null);\n              }); //Set street views\n\n              var streetView = new window.google.maps.StreetViewService();\n              var radius = 50;\n            }\n          };\n\n          var markers = [];\n          var map = new window.google.maps.Map(document.getElementById('map'), {\n            center: {\n              lat: 34.6466411,\n              lng: -97.9536852\n            },\n            zoom: 13\n          });\n          var locations = [{\n            title: 'location1',\n            location: {\n              lat: 34.6446582,\n              lng: -97.930316\n            }\n          }, {\n            title: 'location2',\n            location: {\n              lat: 34.6505821,\n              lng: -97.9580572\n            }\n          }, {\n            title: 'location3',\n            location: {\n              lat: 34.6454464,\n              lng: -97.9676083\n            }\n          }, {\n            title: 'location4',\n            location: {\n              lat: 34.6466411,\n              lng: -97.9536852\n            }\n          }, {\n            title: 'location5',\n            location: {\n              lat: 34.6667351,\n              lng: -97.9548392\n            }\n          }];\n          var infoWindow = new window.google.maps.InfoWindow({\n            content: null\n          });\n          var bounds = new window.google.maps.LatLngBounds(); //Loop over locations and create markers\n\n          var _loop = function _loop(i) {\n            //get position from location array\n            var position = locations[i].location;\n            var title = locations[i].title; //create a marker per location and push to array\n\n            var marker = new window.google.maps.Marker({\n              map: map,\n              position: position,\n              title: title,\n              animation: window.google.maps.Animation.DROP,\n              id: i\n            }); //push into markers array\n\n            markers.push(marker); //extend bounds of map for each marker so they all appear on load\n\n            bounds.extend(marker.position); //create onClick event to open InfoWindow\n\n            marker.addListener('click', function () {\n              marker.setAnimation(window.google.maps.Animation.BOUNCE);\n              populateInfoWindow(this, infoWindow);\n            });\n          };\n\n          for (var i = 0; i < locations.length; i++) {\n            _loop(i);\n          } //fit map to bounds of all markers\n\n\n          map.fitBounds(bounds);\n        })();\n      } else {\n        //alert if the script does not load\n        alert('No Script Loaded');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        classID: \"mapContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Map;\n}(Component); //ScriptLoader used to Async load Google Maps API\n\n\nexport default scriptLoader([\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAcGzKXNeOcVTjtGJ3mezaCbmfq3MAA3_c&v=3\"])(Map);","map":{"version":3,"sources":["/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/Map.js"],"names":["React","Component","scriptLoader","Map","isScriptLoadSucceed","populateInfoWindow","marker","infowindow","getStreetView","data","status","window","google","maps","StreetViewStatus","OK","nearStreetViewLoc","location","latLng","heading","geometry","spherical","computeHeading","setContent","title","open","map","addListener","setAnimation","streetView","StreetViewService","radius","markers","document","getElementById","center","lat","lng","zoom","locations","infoWindow","InfoWindow","content","bounds","LatLngBounds","i","position","Marker","animation","Animation","DROP","id","push","extend","BOUNCE","length","fitBounds","alert"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;IAGMC,G;;;;;;;;;;;;;oDAEgD;AAAA,UAAvBC,mBAAuB,QAAvBA,mBAAuB;;AAClD,UAAIA,mBAAJ,EAAyB;AAAA;AAAA,cAsDdC,kBAtDc,GAsDvB,SAASA,kBAAT,CAA4BC,MAA5B,EAAoCC,UAApC,EAAgD;AAC9C;AACA,gBAAIA,UAAU,CAACD,MAAX,KAAsBA,MAA1B,EAAkC;AAehC;AAfgC,kBAgBvBE,aAhBuB,GAgBhC,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AACnC,oBAAIA,MAAM,KAAKC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,gBAAnB,CAAoCC,EAAnD,EAAuD;AACrD,sBAAIC,iBAAiB,GAAGP,IAAI,CAACQ,QAAL,CAAcC,MAAtC;AACA,sBAAIC,OAAO,GAAGR,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBO,QAAnB,CAA4BC,SAA5B,CAAsCC,cAAtC,EAAd;AACD;AACF,eArB+B;;AAChCf,cAAAA,UAAU,CAACD,MAAX,GAAoBA,MAApB;AACAC,cAAAA,UAAU,CAACgB,UAAX,gBAA8BjB,MAAM,CAACkB,KAArC;AACAjB,cAAAA,UAAU,CAACkB,IAAX,CAAgBC,GAAhB,EAAqBpB,MAArB,EAHgC,CAKhC;;AACAC,cAAAA,UAAU,CAACoB,WAAX,CAAuB,YAAvB,EAAqC,YAAW;AAC9CpB,gBAAAA,UAAU,CAACgB,UAAX,CAAsB,IAAtB;AACAjB,gBAAAA,MAAM,CAACsB,YAAP,CAAoB,IAApB;AACD,eAHD,EANgC,CAWhC;;AACA,kBAAIC,UAAU,GAAG,IAAIlB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBiB,iBAAvB,EAAjB;AACA,kBAAIC,MAAM,GAAG,EAAb;AASD;AACF,WA/EsB;;AAEvB,cAAMC,OAAO,GAAG,EAAhB;AAEA,cAAMN,GAAG,GAAG,IAAIf,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBV,GAAvB,CAA2B8B,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAA3B,EAA2D;AACrEC,YAAAA,MAAM,EAAE;AAACC,cAAAA,GAAG,EAAE,UAAN;AAAkBC,cAAAA,GAAG,EAAE,CAAC;AAAxB,aAD6D;AAErEC,YAAAA,IAAI,EAAE;AAF+D,WAA3D,CAAZ;AAKA,cAAMC,SAAS,GAAG,CAChB;AAACf,YAAAA,KAAK,EAAE,WAAR;AAAqBP,YAAAA,QAAQ,EAAC;AAACmB,cAAAA,GAAG,EAAE,UAAN;AAAkBC,cAAAA,GAAG,EAAE,CAAC;AAAxB;AAA9B,WADgB,EAEhB;AAACb,YAAAA,KAAK,EAAE,WAAR;AAAqBP,YAAAA,QAAQ,EAAC;AAACmB,cAAAA,GAAG,EAAE,UAAN;AAAkBC,cAAAA,GAAG,EAAE,CAAC;AAAxB;AAA9B,WAFgB,EAGhB;AAACb,YAAAA,KAAK,EAAE,WAAR;AAAqBP,YAAAA,QAAQ,EAAC;AAACmB,cAAAA,GAAG,EAAE,UAAN;AAAkBC,cAAAA,GAAG,EAAE,CAAC;AAAxB;AAA9B,WAHgB,EAIhB;AAACb,YAAAA,KAAK,EAAE,WAAR;AAAqBP,YAAAA,QAAQ,EAAC;AAACmB,cAAAA,GAAG,EAAE,UAAN;AAAkBC,cAAAA,GAAG,EAAE,CAAC;AAAxB;AAA9B,WAJgB,EAKhB;AAACb,YAAAA,KAAK,EAAE,WAAR;AAAqBP,YAAAA,QAAQ,EAAC;AAACmB,cAAAA,GAAG,EAAE,UAAN;AAAkBC,cAAAA,GAAG,EAAE,CAAC;AAAxB;AAA9B,WALgB,CAAlB;AAQA,cAAIG,UAAU,GAAG,IAAI7B,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB4B,UAAvB,CAAkC;AACjDC,YAAAA,OAAO,EAAE;AADwC,WAAlC,CAAjB;AAIA,cAAIC,MAAM,GAAG,IAAIhC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB+B,YAAvB,EAAb,CArBuB,CAuBvB;;AAvBuB,qCAwBdC,CAxBc;AAyBrB;AACA,gBAAIC,QAAQ,GAAGP,SAAS,CAACM,CAAD,CAAT,CAAa5B,QAA5B;AACA,gBAAIO,KAAK,GAAGe,SAAS,CAACM,CAAD,CAAT,CAAarB,KAAzB,CA3BqB,CA6BrB;;AACA,gBAAIlB,MAAM,GAAG,IAAIK,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBkC,MAAvB,CAA8B;AACzCrB,cAAAA,GAAG,EAAEA,GADoC;AAEzCoB,cAAAA,QAAQ,EAAEA,QAF+B;AAGzCtB,cAAAA,KAAK,EAAEA,KAHkC;AAIzCwB,cAAAA,SAAS,EAAErC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBoC,SAAnB,CAA6BC,IAJC;AAKzCC,cAAAA,EAAE,EAAEN;AALqC,aAA9B,CAAb,CA9BqB,CAsCrB;;AACAb,YAAAA,OAAO,CAACoB,IAAR,CAAa9C,MAAb,EAvCqB,CAyCrB;;AACAqC,YAAAA,MAAM,CAACU,MAAP,CAAc/C,MAAM,CAACwC,QAArB,EA1CqB,CA4CrB;;AACAxC,YAAAA,MAAM,CAACqB,WAAP,CAAmB,OAAnB,EAA4B,YAAW;AACrCrB,cAAAA,MAAM,CAACsB,YAAP,CAAoBjB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBoC,SAAnB,CAA6BK,MAAjD;AACAjD,cAAAA,kBAAkB,CAAC,IAAD,EAAOmC,UAAP,CAAlB;AACD,aAHD;AA7CqB;;AAwBvB,eAAK,IAAIK,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACN,SAAS,CAACgB,MAA1B,EAAkCV,CAAC,EAAnC,EAAuC;AAAA,kBAA9BA,CAA8B;AAyBtC,WAjDsB,CAmDvB;;;AACAnB,UAAAA,GAAG,CAAC8B,SAAJ,CAAcb,MAAd;AApDuB;AAiFxB,OAjFD,MAiFO;AACL;AACAc,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACD;AACF;;;6BAEQ;AAEP,aACE;AAAK,QAAA,OAAO,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAMD;;;;EAlGexD,S,GAsGhB;;;AACF,eAAeC,YAAY,CACzB,2FADyB,CAAZ,CAEZC,GAFY,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport scriptLoader from 'react-async-script-loader';\n\n\nclass Map extends Component {\n\n  componentWillReceiveProps ({ isScriptLoadSucceed }) {\n    if (isScriptLoadSucceed) {\n\n      const markers = [];\n\n      const map = new window.google.maps.Map(document.getElementById('map'), {\n        center: {lat: 34.6466411, lng: -97.9536852},\n        zoom: 13\n      });\n\n      const locations = [\n        {title: 'location1', location:{lat: 34.6446582, lng: -97.930316}},\n        {title: 'location2', location:{lat: 34.6505821, lng: -97.9580572}},\n        {title: 'location3', location:{lat: 34.6454464, lng: -97.9676083}},\n        {title: 'location4', location:{lat: 34.6466411, lng: -97.9536852}},\n        {title: 'location5', location:{lat: 34.6667351, lng: -97.9548392}},\n      ]\n\n      let infoWindow = new window.google.maps.InfoWindow({\n        content: null\n      });\n\n      let bounds = new window.google.maps.LatLngBounds();\n\n      //Loop over locations and create markers\n      for (let i=0; i<locations.length; i++) {\n        //get position from location array\n        let position = locations[i].location;\n        let title = locations[i].title;\n\n        //create a marker per location and push to array\n        let marker = new window.google.maps.Marker({\n          map: map,\n          position: position,\n          title: title,\n          animation: window.google.maps.Animation.DROP,\n          id: i\n        });\n\n        //push into markers array\n        markers.push(marker);\n\n        //extend bounds of map for each marker so they all appear on load\n        bounds.extend(marker.position);\n\n        //create onClick event to open InfoWindow\n        marker.addListener('click', function() {\n          marker.setAnimation(window.google.maps.Animation.BOUNCE);\n          populateInfoWindow(this, infoWindow);\n        });\n      }\n\n      //fit map to bounds of all markers\n      map.fitBounds(bounds);\n\n      function populateInfoWindow(marker, infowindow) {\n        //make sure infoWindow not already open\n        if (infowindow.marker !== marker) {\n          infowindow.marker = marker;\n          infowindow.setContent(`<div>${marker.title}</div>`);\n          infowindow.open(map, marker);\n\n          //make sure marker is cleared if infowindow is closed\n          infowindow.addListener('closeclick', function() {\n            infowindow.setContent(null);\n            marker.setAnimation(null);\n          });\n\n          //Set street views\n          let streetView = new window.google.maps.StreetViewService();\n          let radius = 50;\n\n          //check for panorama, set to nearest if none available\n          function getStreetView(data, status) {\n            if (status === window.google.maps.StreetViewStatus.OK) {\n              let nearStreetViewLoc = data.location.latLng;\n              let heading = window.google.maps.geometry.spherical.computeHeading()\n            }\n          }\n        }\n      }\n\n    } else {\n      //alert if the script does not load\n      alert('No Script Loaded')\n    }\n  }\n\n  render() {\n\n    return (\n      <div classID=\"mapContainer\">\n        <div id='map'></div>\n      </div>\n    );\n\n  }\n\n}\n\n  //ScriptLoader used to Async load Google Maps API\nexport default scriptLoader(\n  [`https://maps.googleapis.com/maps/api/js?key=AIzaSyAcGzKXNeOcVTjtGJ3mezaCbmfq3MAA3_c&v=3`]\n) (Map)\n"]},"metadata":{},"sourceType":"module"}