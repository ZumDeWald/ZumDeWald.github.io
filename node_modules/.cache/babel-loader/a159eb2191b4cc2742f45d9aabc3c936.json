{"ast":null,"code":"import _classCallCheck from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Map from './Map';\nimport InfoWindow from './InfoWindow';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      locations: [{\n        title: 'Bethlehem',\n        location: {\n          lat: 31.7053996,\n          lng: 35.1936877\n        }\n      }, {\n        title: 'Nazareth',\n        location: {\n          lat: 32.6996454,\n          lng: 35.2908666\n        }\n      }, {\n        title: 'Capernaum',\n        location: {\n          lat: 32.8803473,\n          lng: 35.5645522\n        }\n      }, {\n        title: 'Gesthsemane',\n        location: {\n          lat: 31.7793143,\n          lng: 35.2375914\n        }\n      }, {\n        title: 'Church of the Holy Sepulchre',\n        location: {\n          lat: 31.777207,\n          lng: 35.231681\n        }\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"createInfoWindow\",\n    value: function createInfoWindow(e, map) {\n      //save title and ID to pass to InfoWindow component\n      var currentTitle = e.title;\n      var currentID = e.id; //create InfoWindow instance\n\n      var infoWindow = new window.google.maps.InfoWindow({\n        content: \"<div id='\".concat(currentID, \"' />\"),\n        position: e.position\n      }); //add listener to poulate infoWindow on click\n\n      infoWindow.addListener('domready', function (e) {\n        ReactDOM.render(React.createElement(InfoWindow, {\n          title: currentTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }), document.getElementById(\"\".concat(currentID)));\n      }); //open infoWindow on map\n\n      infoWindow.open(map);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var markers = [];\n      var locations = this.state.locations;\n      return React.createElement(Map, {\n        id: \"main-map\",\n        options: {\n          center: {\n            lat: 31.7053996,\n            lng: 35.1936877\n          },\n          zoom: 13\n        } //On creating a map instance, add markers/infoWindows\n        //This setup allows for multiple Maps to be loaded\n        //independently inside the same main App if desired\n        ,\n        onMapLoad: function onMapLoad(map) {\n          //create bounds instance\n          var bounds = new window.google.maps.LatLngBounds(); //Loop over state and create marker info for each\n          //location and push into new array\n          //Then add listener for each individual marker\n\n          locations.forEach(function (place, index) {\n            var position = place.location;\n            var title = place.title;\n            var marker = new window.google.maps.Marker({\n              map: map,\n              position: position,\n              title: title,\n              animation: window.google.maps.Animation.DROP,\n              id: index\n            }); //Add marker to new array\n\n            markers.push(marker); //Extend boundry of map to incorporate each marker\n\n            bounds.extend(marker.position);\n            marker.addListener('click', function () {\n              _this2.createInfoWindow(marker, map);\n            });\n          }); //Fit map to extended bounds\n\n          map.fitBounds(bounds);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Z/Projects/WebDev/GwG-FEND/Projects/NeighborhoodMap/neighborhood-map/src/App.js"],"names":["React","Component","ReactDOM","Map","InfoWindow","App","state","locations","title","location","lat","lng","e","map","currentTitle","currentID","id","infoWindow","window","google","maps","content","position","addListener","render","document","getElementById","open","markers","center","zoom","bounds","LatLngBounds","forEach","place","index","marker","Marker","animation","Animation","DROP","push","extend","createInfoWindow","fitBounds"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Map from './Map';\nimport InfoWindow from './InfoWindow';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    locations: [\n      {title: 'Bethlehem', location:{lat: 31.7053996, lng: 35.1936877}},\n      {title: 'Nazareth', location:{lat: 32.6996454, lng: 35.2908666}},\n      {title: 'Capernaum', location:{lat: 32.8803473, lng: 35.5645522}},\n      {title: 'Gesthsemane', location:{lat: 31.7793143, lng: 35.2375914}},\n      {title: 'Church of the Holy Sepulchre', location:{lat: 31.777207, lng: 35.231681}},\n    ],\n  }\n\n  createInfoWindow(e, map) {\n    //save title and ID to pass to InfoWindow component\n    let currentTitle = e.title;\n    let currentID = e.id;\n\n    //create InfoWindow instance\n    const infoWindow = new window.google.maps.InfoWindow({\n      content: `<div id='${currentID}' />`,\n      position: e.position\n    })\n\n    //add listener to poulate infoWindow on click\n    infoWindow.addListener('domready', e => {\n      ReactDOM.render(<InfoWindow\n        title={currentTitle}\n      />, document.getElementById(`${currentID}`))\n    })\n\n    //open infoWindow on map\n    infoWindow.open(map)\n  }\n\n\n  render() {\n\n    let markers = [];\n    const locations = this.state.locations;\n\n    return (\n      <Map\n        id='main-map'\n        options={{\n          center: { lat:31.7053996 ,lng:35.1936877 },\n          zoom: 13\n        }}\n\n      //On creating a map instance, add markers/infoWindows\n      //This setup allows for multiple Maps to be loaded\n      //independently inside the same main App if desired\n        onMapLoad={ map => {\n          //create bounds instance\n          const bounds = new window.google.maps.LatLngBounds();\n\n          //Loop over state and create marker info for each\n          //location and push into new array\n          //Then add listener for each individual marker\n          locations.forEach((place, index) => {\n            let position = place.location;\n            let title = place.title;\n            let marker = new window.google.maps.Marker({\n              map: map,\n              position: position,\n              title: title,\n              animation: window.google.maps.Animation.DROP,\n              id: index\n            });\n            //Add marker to new array\n            markers.push(marker);\n            //Extend boundry of map to incorporate each marker\n            bounds.extend(marker.position);\n            marker.addListener('click', () => {\n              this.createInfoWindow(marker, map);\n            });\n          });\n          //Fit map to extended bounds\n          map.fitBounds(bounds);\n        }}\n      />\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}